<style>
    
        header {
            display: flex;
            justify-content: space-between;
            padding: 20px;
        }
        main {
            width: 80%;
            margin: auto;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 110px;
            margin-bottom: 10%;
        }

        button{
            border: none;
            background-color: transparent;
            cursor: pointer;
            font-size: 20px;
            transition: transform 0.2s ease;
            color: #e0aaff;
        }
        button:hover{
            transform: translate(3px, -3px);
        }
        .mainCardBoard {
            background-color: #2b2c37;
            border-radius: 10px;
            width: 300px;
            padding: 20px;
            box-shadow: 0px 0px 5px 0px #383a47 ;
            margin-right: 10px;
        
        }

        .task {
            color: #6561c8;
            margin-bottom: 15px;
            
        }
        h3 {
            margin-bottom: 20px;
        
        }
        .taskCreate {
            background-color: aliceblue;
            padding: 10px;
            border-radius: 5px;
            color: #6561c8;
            margin: 10px;
            }

        .xis {
            height: 20px;
            cursor: pointer;
        }
        .headerCard {
            display: flex;
            justify-content: space-between;
        }

        ::-webkit-scrollbar {
            width: 10px;
            height: 50px;
        }

        ::-webkit-scrollbar-thumb {
            background: #6561c8;
            border-radius: 10px;
        
        }
        ::-webkit-scrollbar-thumb:hover {
            
        }

        .deleteTask {
            margin-right: 5px;
            color: black;
        }
        .taskContent {
            justify-content: space-between;
        }
        /* JS */

        .modalOverlay {
            top: 0;
            left: 0;
            z-index: 9998;
            position: fixed;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .WindowInput {
            background-color: #2b2c37;
            width: 40%;
            margin-top: 10%;
            margin-left: 20%;
            z-index: 9999;
            position: fixed;
            border-radius: 10px;
        }
        .inputCreateCard{
            border-radius: 5px;
            width: 70%;
            border: none;
            padding: 10px;
            color: black;
        
        }
        .headerInput{
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        .inputContent {
            margin: 40px;
        }

        /* otherCard */

        .headerOtherCard{
            display: flex;
            justify-content: space-between;
            }
        .otherCardBoard {
            color:#2b2c37 ;
            background-color:#2b2c37 ;
            border-radius: 10px;
            width: 300px;
            padding: 20px;
            box-shadow: 0px 0px 5px 0px #282a33 ;
            margin-right: 10px;
        
        }
</style>
<header>
       <div>
        <H2>TASKS LIST</H2>
       </div>
       <button class="buttonCreateCardBoard">
        ADD A NEW CARDBOARD
       </button>
    </header>

    <main>
        <div class="toDo mainCardBoard cardBoard">
            <div class="CardBoardMenu">
                <h3>TO DO(0)</h3>
            
                <button class="addNewTask">
                    + a new task
                </button>
            </div>
            <div class="task">
            </div>
        </div>
        
        <div class="Doing mainCardBoard cardBoard">
            <div class="CardBoardMenu">
                <h3>DOING(0)</h3>
            
                <button class="addNewTask">
                    + a new task
                </button>
            </div>
            <div class="task">
            </div>
        </div>
        <div class="Done mainCardBoard cardBoard">
            <div class="CardBoardMenu">
                <h3>DONE(0)</h3>
            
                <button class="addNewTask">
                    + a new task
                    <img src="/everything/frontendMentorChallengs/ServerCards/assets/8666736_x_circle_icon.png" alt="">
                </button>
            </div>
            <div class="task">
            </div>
        </div>
        
        
    </main> 
    {{#each login}}
        <p>Name with id 1: {{dataValues.name}}</p>
    {{/each}}
    <script>

        const content = function(){
        console.log('testing')
        let countToDo = 0
        let countDoing = 0
        let countDone = 0

        // Main tag
        let main = document.querySelector('main')

        let buttonCreateCardBoard = document.querySelector('.buttonCreateCardBoard') 

        buttonCreateCardBoard.addEventListener('click', ()=>{
            let newCardBoard = new CreatingNewCardBoard()
        })

        class CreatingNewCardBoard{
            constructor(){
                this.CreatingCard()
                
            }
            CreatingCard(){
                this.cardBoardDiv = document.createElement('div')
                this.cardBoardDiv.setAttribute('class', 'otherCardBoard')
                this.cardBoardDiv.innerHTML = `
                    <div class="CardBoardMenu">
                    <div class ='headerOtherCard'> <h3>OTHER CARD(0)</h3> <span> <img class="closeOtherCard xis" src="8666595_x_icon.png"> </span>
                    </div>
                    <button class="addNewTask">
                        + a new task
                    </button>
                    </div>
                    <div class="task">
                    </div>
                `
                main.appendChild(this.cardBoardDiv)
                const addNewTaskButtons = this.cardBoardDiv.querySelectorAll('.addNewTask')
                
                addNewTaskButtons.forEach((el, i) => {
            
                    if (el) { // Check if el is not null or undefined
                        el.addEventListener('click', () => {
                            console.log(loginArray)
                            cardClicked = el
                            let InputWindow = new Create_New_Task()
                            
                        })
                    }
                })

                this.ClosingOtherCard()
                
            }

            ClosingOtherCard(){
                this.closeOtherCard = document.querySelectorAll('.closeOtherCard')
                this.closeOtherCard.forEach((el, i)=>{
                    el.addEventListener('click', ()=>{
                        this.father = el.parentNode.parentNode.parentNode.parentNode
                        
                        main.removeChild(this.father)
                        
                    })
                })

            }
        } 







        // Selection the task buttons
        let button_Add_NewTask = document.querySelectorAll('.addNewTask')
        let cardClicked = 0
        // Adding a event Listener to the buttons addNewTask
        function addingEventListener(){
            button_Add_NewTask.forEach((el, i) => {
            
                if (el) { // Check if el is not null or undefined
                    el.addEventListener('click', () => {
                        cardClicked = el
                        let InputWindow = new Create_New_Task()
                    })
                }
            })
        }
        addingEventListener()

        // Creating Task
        class Create_New_Task {
            constructor(){
                this.CreatingInputWindow()
            }
            // Creating Input Window
            CreatingInputWindow(){
                // Creating Modal Overlay
                this.modalOverlay = document.createElement('div')
                this.modalOverlay.setAttribute('class', 'modalOverlay')
                main.appendChild(this.modalOverlay)

                
                // Creating input div
                
                this.divInput = document.createElement('div')
                this.divInput.setAttribute('class', 'WindowInput')
                this.divInput.innerHTML = `
                    <div class='inputContent'>
                        <div class="headerInput">
                            <h2>Type the task below </h2>
                            <img class="closeInputDiv xis" src="../assets/8666595_x_icon.png">
                        </div>
                        <input type="text" class="inputCreateCard">
                        <button class="buttonInput">Create</button>
                    </div>
                `
                // Selection the button close and adding an event listener to close the window
                let buttonClose = this.divInput.querySelector('.closeInputDiv')
                buttonClose.addEventListener('click', ()=>{
                    main.removeChild(this.divInput)
                    main.removeChild(this.modalOverlay)
                })
                
                // Selecting the input button and input 
                let buttonInput = this.divInput.querySelector('.buttonInput')
                let inputCreateCard = this.divInput.querySelector('.inputCreateCard')
                main.appendChild(this.divInput)

                // Adding a event listener to the input button to create a task
                buttonInput.addEventListener('click', ()=>{
                    this.taskText = inputCreateCard.value
                    this.CreatingTask()

                    main.removeChild(this.divInput)
                    main.removeChild(this.modalOverlay)
                    
                })
            }

            // Creating the task
            CreatingTask() {
                // Task created
                this.newTask = document.createElement('div')
                this.newTask.setAttribute('class', 'taskCreate')
                this.newTask.innerHTML = `
                ${this.taskText}  <img class="deleteTask xis" src="../assets/8666595_x_icon.png"> 
                `
                // Selecting the x button to delete a task and adding a event on it
                let deleteTask = this.newTask.querySelectorAll('.deleteTask')
                deleteTask.forEach((el, i)=>{
                    el.addEventListener('click', ()=>{
                        cardClicked.parentNode.removeChild(el.parentNode)
                    })
                })
                
                
                cardClicked.parentNode.appendChild(this.newTask)
            }
        }
        console.log('testing')

    }
        content()

        




    </script>